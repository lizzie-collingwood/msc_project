import json
import ast
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('ggplot')
plt.rcParams['mathtext.fontset'] = 'stix'
plt.rcParams['font.family'] = 'STIXGeneral'
import cmasher as cmr


class AnalyseJson:
    """Opens and extracts data and info from the json output of sw_energy.py."""
    column_dict = {
        1: {'ylab': 'Total mass (kg)'},
        2: {'ylab': 'Energy'},
        3: {'ylab': 'Absolute vorticity'},
        4: {'ylab': 'Total enstrophy'},
        5: {'ylab': 'Linear iterations'},
        6: {'ylab': 'Nonlinear iterations'},}
    leg_dict = {
        'poisson': {'rename': '', 'options': {'True': 'PI', 'False': 'IMR'}},
        'upwind': {'rename': '', 'options': {'True': 'Upwind', 'False': 'Average'}},
        'dt': {'rename': 'Time step (hours)'},
        'snes_rtol': {'rename': 'Nonlinear stopping criteration: relative residual norm'},
        'rtol': {'rename': 'Linear stopping criteration: relative residual norm'},
        'atol': {'rename': 'Linear stopping criteration: absolute residual norm'},
    }

    def __init__(self, file=None):
        if file is not None:
            self.array, self.options = self.read_json(jsonfile=file)

    def read_json(self, jsonfile):
        """Read, load, and plot data held in JSON file: mass, energy, abs vorticity, and enstrophy."""
        # Load JSON file
        jsondata = json.load(jsonfile)

        # Extract the option information
        options = jsondata['options']

        # Extract the keys and values and concatenate
        data = jsondata['data']
        times = np.asarray(list(data), dtype=float) / (3600*24)
        vals = np.asarray(list(data.values()), dtype=float)
        return np.r_['1,2,0', times, vals], options

    def extract(self, kwargs):
        """Extract the data and options info from json files."""
        arrs, ops = {}, []
        for key, value in kwargs.items():
            arr, op = self.read_json(jsonfile=value)
            arrs.update({key: arr})
            ops.append(ast.literal_eval(op))

        # Combine the option data into one dict.
        ops = {k: [d[k] for d in ops] for k in ops[0]}
        return arrs, ops

    def find_test_parameters(self, ops):
        """Finds the test parameters given options dict."""
        out = []
        for k, vals in ops.items():
            if len(set(vals))>1:
                labs = list(map(str, vals))
                K = k + ': '
                try:
                    K = self.leg_dict[k]['rename'] + ' '
                    try:
                        labs = [self.leg_dict[k]['options'][l] for l in labs]
                    except: pass
                except: pass

                if len(out)==0:
                    out = [K+l for l in labs]
                else:
                    out = [out[i]+', '+K+labs[i] for i in range(len(labs))]
        
        if len(out)==0: out = [' ']
        return out

    def multiplot(self, cmap='winter', colnum=1, **kwargs):
        """Plot multiple json file data."""
        # Set the colour scheme
        colours = cmr.take_cmap_colors(cmap, len(kwargs), return_fmt='hex')

        # Extract data, options and labels from json files.
        arrs, ops = self.extract(kwargs)
        labels = self.find_test_parameters(ops)

        # Plot the json data
        plt.figure()
        for i, (_, arr) in enumerate(arrs.items()):
            plt.plot(arr[1:, 0], arr[1:, colnum], label=labels[i])
            
        # Formatting
        plt.xlabel('Time (days)')
        plt.ylabel(self.column_dict[colnum]['ylab'])
        dmax = max(ops['dmax'])
        plt.xticks(np.arange(dmax+1))
        if len(kwargs)>1: plt.legend()
        plt.show()


# Locate JSON files
f1 = open('/Users/lizziecollingwood/MSc./proj/simulations/w5/ref2/PI/upwind/w5aug.json')
f2 = open('/Users/lizziecollingwood/MSc./proj/simulations/w5/ref2/IMR/upwind/w5aug.json')
f3 = open('/Users/lizziecollingwood/MSc./proj/simulations/w5/ref2/IMR/avg/w5aug.json')

# Initialise class and implement method
aj = AnalyseJson()

# aj.multiplot(j1=f1, j2=f2, j3=f3, colnum=2)
aj.multiplot(j1=f1, colnum=2)


