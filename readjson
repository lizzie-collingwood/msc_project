import json
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('ggplot')
plt.rcParams['mathtext.fontset'] = 'stix'
plt.rcParams['font.family'] = 'STIXGeneral'
import cmasher as cmr
colors = cmr.take_cmap_colors('winter', 7, return_fmt='hex')


_ex = {'base_level': 1, 'ref_level': 1, 'dmax': 1.0, 'dumpt': 24, 'dt': 1, 'filename': 'w5aug', 'coords_degree': 1, 'degree': 1, 'upwind': True, 'snes_rtol': 1e-08, 'atol': 1e-08, 'rtol': 1e-08, 'show_args': False}

print('\n')


# Opening JSON file
# f = open('/Users/lizziecollingwood/MSc./proj/simulations/w5/ref2/w5aug.json')
# f = open('/Users/lizziecollingwood/MSc./proj/simulations/w5/ref2/PI/atol1en15/w5aug.json')
f = open('/Users/lizziecollingwood/MSc./proj/simulations/w5/ref2/PI/test/w5aug.json')
# f = open('/Users/lizziecollingwood/MSc./proj/simulations/w5/ref2/PI/w5aug.json')
# f = open('/Users/lizziecollingwood/MSc./proj/simulations/w5/ref3/w5aug.json')
# f = open('/Users/lizziecollingwood/MSc./proj/simulations/w5/ref4/w5aug.json')
# f = open('/Users/lizziecollingwood/MSc./proj/simulations/w5/ref5/w5aug.json')

def read_json(jsonfile):
    """Read, load, and plot data held in JSON file: mass, energy, abs vorticity, and enstrophy."""
    # Load JSON file
    data = json.load(f)

    # Extract the keys and values and concatenate
    times = np.asarray(list(data), dtype=float) / (3600*24)
    vals = np.asarray(list(data.values()), dtype=float)
    return np.r_['1,2,0', times, vals]

arr = read_json(jsonfile=f)

# Plot the properties
def plot_property(colnum=1, ylab='Total Mass (kg)', days=15):
    """Plots the property number colnum."""
    plt.figure()
    plt.plot(arr[1:, 0], arr[1:, colnum], color=colors[colnum])
    plt.xlabel('Time (days)')
    plt.ylabel(ylab)
    plt.xticks(np.arange(days+1))

# Plot each of the properties
plot_property(colnum=1, ylab='Total Mass (kg)')
plot_property(colnum=2, ylab='Energy')
plot_property(colnum=3, ylab='Absolute Vorticity')
plot_property(colnum=4, ylab='Total enstrophy')
plot_property(colnum=5, ylab='Linear Iterations')
plot_property(colnum=6, ylab='Nonlinear Iterations')

plt.show()
# Close file
f.close()

